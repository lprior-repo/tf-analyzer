# .go-mutesting-ci.yml
# CI-optimized mutation testing configuration for automated pipelines
# Target: Complete under 45 seconds with essential coverage for CI/CD
# Focus: Critical business logic with optimized performance for automation

test:
  command: "go test -v -run=."
  timeout: "20s"

mutators:
  # Essential mutators optimized for CI performance
  - name: "conditional-negation"
    enabled: true
    
  - name: "boolean-inversion"
    enabled: true
    
  - name: "binary-operator"
    enabled: true
    
  - name: "conditional-boundaries"
    enabled: true

# Target core business logic for CI quality gates
include:
  - "analyzer.go"      # Core Terraform parsing and analysis
  - "orchestrator.go"  # Workflow coordination and error handling

# Exclude supporting files to optimize CI performance
exclude:
  - "*_test.go"
  - "cmd.go"          # Excluded for CI speed (covered in tier1)
  - "cloner.go"
  - "reporter.go"
  - "markdown.go"
  - "vendor/*"
  - ".git/*"
  - "*.pb.go"
  - "*_gen.go"

# High threshold for CI quality gates
threshold: 90

# Fail CI build if quality standards not met
fail_on_low_score: true

# CI-optimized performance settings
options:
  parallel: true
  max_workers: 2
  timeout_multiplier: 0.6
  max_mutations: 30
  
# CI-specific reporting
reporting:
  format: "json"
  output_file: "mutation-results-ci.json"
  include_details: false
  
# CI mutation strategies
ci_strategies:
  # Focus on highest-impact mutations for CI feedback
  priority_functions:
    - "parseHCL"
    - "extractProviders"
    - "processRepositories"
    - "handleError"
    
  # Quick error detection patterns
  error_detection:
    - "nil_checks"
    - "error_returns"
    - "validation_failures"
    
  # Performance-critical paths
  performance_paths:
    - "concurrent_processing"
    - "file_operations"
    - "data_transformation"