version: "3"

vars:
  GOLANGCI_LINT_VERSION: v1.55.2

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Build targets
  build:
    desc: Build the application
    cmds:
      - echo "Building tf-analyzer..."
      - go build -ldflags="-s -w"

  build-race:
    desc: Build with race detector
    cmds:
      - echo "Building with race detector..."
      - go build -race -o bin/tf-analyzer-race .

  # Development targets
  run:
    desc: Run the application with TUI
    cmds:
      - echo "Running tf-analyzer with TUI..."
      - go run . analyze --env-file .env --orgs hashicorp

  dev:
    desc: Run with live reload (requires air)
    deps: [install-air]
    cmds:
      - echo "Starting development server..."
      - air

  # Testing targets
  test:
    desc: Run tests
    cmds:
      - echo "Running tests..."
      - go test -v ./...

  test-race:
    desc: Run tests with race detector
    cmds:
      - echo "Running tests with race detector..."
      - go test -race -v ./...

  test-short:
    desc: Run short tests only
    cmds:
      - echo "Running short tests..."
      - go test -short -v ./...

  coverage:
    desc: Generate test coverage report
    cmds:
      - echo "Generating coverage report..."
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated{{":"}} coverage.html"
      - go tool cover -func=coverage.out | tail -1

  coverage-check:
    desc: Check coverage meets 80% threshold
    cmds:
      - echo "Checking coverage threshold..."
      - go test -coverprofile=coverage.out ./...
      - |
        coverage=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | tr -d '%')
        threshold=80
        if (( $(echo "$coverage < $threshold" | bc -l) )); then
          echo "Coverage $coverage% is below threshold $threshold%"
          exit 1
        else
          echo "Coverage $coverage% meets threshold $threshold%"
        fi

  # Mutation Testing Suite - Tiered Performance-Optimized Strategy
  mutation-quick:
    desc: Quick mutation testing for development feedback (<15s)
    cmds:
      - echo "Running quick mutation testing for development feedback..."
      - |
        if ! which go-mutesting > /dev/null; then
          echo "Installing go-mutesting..."
          go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
        fi
      - go-mutesting --config .go-mutesting-quick.yml

  mutation-tier1:
    desc: Tier 1 mutation testing on critical business logic (<60s)
    cmds:
      - echo "Running Tier 1 mutation testing on critical business logic..."
      - |
        if ! which go-mutesting > /dev/null; then
          echo "Installing go-mutesting..."
          go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
        fi
      - go-mutesting --config .go-mutesting-tier1.yml

  mutation-tier2:
    desc: Tier 2 comprehensive mutation testing on full codebase (<180s)
    cmds:
      - echo "Running Tier 2 comprehensive mutation testing..."
      - |
        if ! which go-mutesting > /dev/null; then
          echo "Installing go-mutesting..."
          go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
        fi
      - go-mutesting --config .go-mutesting-tier2.yml

  mutation-ci:
    desc: CI-optimized mutation testing for automated pipelines (<45s)
    cmds:
      - echo "Running CI-optimized mutation testing..."
      - |
        if ! which go-mutesting > /dev/null; then
          echo "Installing go-mutesting..."
          go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
        fi
      - go-mutesting --config .go-mutesting-ci.yml

  mutation-file:
    desc: Run mutation testing on specific file (usage - task mutation-file -- filename.go)
    cmds:
      - echo "Running targeted mutation testing on {{.CLI_ARGS}}..."
      - |
        if ! which go-mutesting > /dev/null; then
          echo "Installing go-mutesting..."
          go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
        fi
      - go-mutesting --config .go-mutesting-tier1.yml {{.CLI_ARGS}}

  mutation-report:
    desc: Generate comprehensive mutation testing report with metrics
    cmds:
      - echo "Generating comprehensive mutation testing report..."
      - task: coverage
      - task: mutation-tier1
      - echo "Mutation testing report completed. Check logs for mutation scores and coverage comparison."

  mutation:
    desc: Full mutation testing suite (alias for mutation-tier2)
    cmds:
      - task: mutation-tier2

  # Mutation Testing Workflows
  mutation-dev:
    desc: Development workflow - quick mutation testing after code changes
    cmds:
      - task: test-short
      - task: mutation-quick
      - echo "Development mutation testing completed - quick feedback loop"

  mutation-pr:
    desc: Pull Request workflow - tier 1 testing for code review
    cmds:
      - task: lint
      - task: test
      - task: mutation-tier1
      - echo "Pull Request mutation testing completed - ready for review"

  mutation-release:
    desc: Release workflow - comprehensive tier 2 testing
    cmds:
      - task: lint
      - task: test-race
      - task: coverage-check
      - task: mutation-tier2
      - echo "Release mutation testing completed - production ready"

  mutation-install:
    desc: Install mutation testing tools
    status:
      - which go-mutesting
    cmds:
      - echo "Installing go-mutesting..."
      - go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest

  bench:
    desc: Run benchmarks
    cmds:
      - echo "Running benchmarks..."
      - go test -bench=. -benchmem ./...

  # Code quality targets
  lint:
    desc: Run golangci-lint
    deps: [install-golangci-lint]
    cmds:
      - echo "Running golangci-lint..."
      - golangci-lint run

  lint-fix:
    desc: Run golangci-lint with auto-fix
    deps: [install-golangci-lint]
    cmds:
      - echo "Running golangci-lint with auto-fix..."
      - golangci-lint run --fix

  fmt:
    desc: Format code
    cmds:
      - echo "Formatting code..."
      - go fmt ./...

  # Tool installation
  install-tools:
    desc: Install all development tools
    deps: [install-golangci-lint, install-air]

  install-golangci-lint:
    desc: Install golangci-lint
    status:
      - which golangci-lint
    cmds:
      - echo "Installing golangci-lint..."
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin {{.GOLANGCI_LINT_VERSION}}

  install-air:
    desc: Install air for live reload
    status:
      - which air
    cmds:
      - echo "Installing air..."
      - go install github.com/air-verse/air@latest

  # Dependency management
  deps:
    desc: Download dependencies
    cmds:
      - echo "Downloading dependencies..."
      - go mod download

  deps-tidy:
    desc: Tidy up dependencies
    cmds:
      - echo "Tidying dependencies..."
      - go mod tidy

  deps-verify:
    desc: Verify dependencies
    cmds:
      - echo "Verifying dependencies..."
      - go mod verify

  # Cleanup
  clean:
    desc: Clean build artifacts
    cmds:
      - echo "Cleaning up..."
      - rm -rf bin/ dist/ tmp/ coverage.out coverage.html

  # CI targets
  ci:
    desc: Run CI pipeline (lint + test)
    deps: [deps]
    cmds:
      - task: lint
      - task: test

  ci-full:
    desc: Run full CI pipeline with comprehensive mutation testing
    deps: [deps]
    cmds:
      - task: lint
      - task: test-race
      - task: coverage-check
      - task: mutation-tier1

  ci-mutation:
    desc: Run CI pipeline with optimized mutation testing
    deps: [deps]
    cmds:
      - task: lint
      - task: test
      - task: mutation-ci

  ci-dev:
    desc: Run development CI pipeline with quick mutation testing
    deps: [deps]
    cmds:
      - task: lint
      - task: test-short
      - task: mutation-quick

  # Security
  sec:
    desc: Run security checks (requires gosec)
    cmds:
      - |
        if ! which gosec > /dev/null; then
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        fi
      - echo "Running security checks..."
      - gosec ./...

  # Initialize project
  init:
    desc: Initialize go module and install tools
    cmds:
      - echo "Initializing project..."
      - |
        if [ ! -f go.mod ]; then
          go mod init tf-analyzer
        fi
      - task: install-tools
      - task: deps

  # Performance profiling
  profile-cpu:
    desc: Run CPU profiling
    cmds:
      - echo "Running CPU profiling..."
      - go test -cpuprofile=cpu.prof -bench=. ./...

  profile-mem:
    desc: Run memory profiling
    cmds:
      - echo "Running memory profiling..."
      - go test -memprofile=mem.prof -bench=. ./...

